#compdef wutag

autoload -U is-at-least

_wutag() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-d+[Specify starting path for filesystem traversal]:dir:_files -/' \
'--dir=[Specify starting path for filesystem traversal]:dir:_files -/' \
'-m+[Set maximum depth to recurse into]:num: ' \
'--max-depth=[Set maximum depth to recurse into]:num: ' \
'-R+[Specify a different registry to use]:file:_files' \
'--registry=[Specify a different registry to use]:file:_files' \
'-c+[When to colorize output]:when:(never auto always)' \
'--color=[When to colorize output]:when:(never auto always)' \
'*-t+[File-type(s) to filter by: f|file, d|directory, l|symlink, e|empty]:filetype:(f file d dir l symlink b block c char s socket p fifo x executable e empty)' \
'*--type=[File-type(s) to filter by: f|file, d|directory, l|symlink, e|empty]:filetype:(f file d dir l symlink b block c char s socket p fifo x executable e empty)' \
'*-e+[Filter results by file extension]:extension: ' \
'*--ext=[Filter results by file extension]:extension: ' \
'*-E+[Exclude results that match pattern]:pattern:_files -/' \
'*--exclude=[Exclude results that match pattern]:pattern:_files -/' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
'-i[Case insensitively search]' \
'--case-insensitive[Case insensitively search]' \
'-s[Case sensitively search]' \
'--case-sensitive[Case sensitively search]' \
'-r[Search with a regular expressions]' \
'--regex[Search with a regular expressions]' \
'-G[Search with a glob pattern]' \
'--glob[Search with a glob pattern]' \
'-F[Search with a literal fixed-string]' \
'--fixed-string[Search with a literal fixed-string]' \
'-g[Apply operation to all tags and files instead of locally]' \
'--global[Apply operation to all tags and files instead of locally]' \
'-L[Follow symlinks when peforming an action on a file]' \
'--follow[Follow symlinks when peforming an action on a file]' \
'--no-follow[Do not follow symlinks when peforming an action on a file]' \
'(-c --color)-l[Respect '\''LS_COLORS'\'' environment variable when coloring the output]' \
'(-c --color)--ls-colors[Respect '\''LS_COLORS'\'' environment variable when coloring the output]' \
'-q[Do not display any output for any command]' \
'--quiet[Do not display any output for any command]' \
":: :_wutag_commands" \
"*::: :->wutag" \
&& ret=0
    case $state in
    (wutag)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wutag-command-$line[1]:"
        case $line[1] in
            (list|ls)
_arguments "${_arguments_options[@]}" \
'-r[Output will not be colorized]' \
'--raw[Output will not be colorized]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
":: :_wutag__list_commands" \
"*::: :->list" \
&& ret=0

    case $state in
    (list|ls)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wutag-list-command-$line[1]:"
        case $line[1] in
            (tags)
_arguments "${_arguments_options[@]}" \
'-V[Display values along with the tags]' \
'--with-values[Display values along with the tags]' \
'-c[Do not display tag count]' \
'--no-count[Do not display tag count]' \
'-u[Only display unique occurences. (See --help)]' \
'--unique[Only display unique occurences. (See --help)]' \
'-s[Sort the output]' \
'--sort[Sort the output]' \
'-1[Display one tag per line instead of tags on files]' \
'--one-per-line[Display one tag per line instead of tags on files]' \
'(-c --no-count)-b[Use border separators when formatting output]' \
'(-c --no-count)--border[Use border separators when formatting output]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
&& ret=0
;;
(files)
_arguments "${_arguments_options[@]}" \
'-t[Display tags along with the files]' \
'--with-tags[Display tags along with the files]' \
'-V[Display values along with the tags]' \
'--with-values[Display values along with the tags]' \
'(-G --garrulous)-f[Format the tags and files output into columns]' \
'(-G --garrulous)--format[Format the tags and files output into columns]' \
'-b[Use border separators when formatting output]' \
'--border[Use border separators when formatting output]' \
'(-f --format)-G[Display tags and files on separate lines]' \
'(-f --format)--garrulous[Display tags and files on separate lines]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
&& ret=0
;;
        esac
    ;;
esac
;;
(set|tag)
_arguments "${_arguments_options[@]}" \
'-C+[Explicitly select color for tag]:COLOR: ' \
'--color=[Explicitly select color for tag]:COLOR: ' \
'-Q+[Apply tags to the result of a query instead of a pattern match]:query: ' \
'--query=[Apply tags to the result of a query instead of a pattern match]:query: ' \
'(-V --value)*-p+[Specify any number of tag=value pairs]:pairs: ' \
'(-V --value)*--pairs=[Specify any number of tag=value pairs]:pairs: ' \
'-V+[Specify a value to set all the tag(s) to]:value: ' \
'--value=[Specify a value to set all the tag(s) to]:value: ' \
'-c[Clear the tags on the match(es) before the new one(s) are set]' \
'--clear[Clear the tags on the match(es) before the new one(s) are set]' \
'-s[Arguments are expected to be passed through stdin]' \
'--stdin[Arguments are expected to be passed through stdin]' \
'-F[Force the creation of a new tag]' \
'--force[Force the creation of a new tag]' \
'-f[Follow symlinks before setting tags]' \
'--follow-symlinks[Follow symlinks before setting tags]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
':pattern -- A glob pattern like "*.png":_files' \
'*::_wutag_tags:' \
&& ret=0
;;
(rm)
_arguments "${_arguments_options[@]}" \
'(-V --values)*-p+[Specify any number of tag=value pairs to delete]:pairs: ' \
'(-V --values)*--pairs=[Specify any number of tag=value pairs to delete]:pairs: ' \
'-f[Follow symlinks before removing tags and/or values]' \
'--follow-symlinks[Follow symlinks before removing tags and/or values]' \
'-V[Indicate the item(s) in the given list are values intead of tags]' \
'--values[Indicate the item(s) in the given list are values intead of tags]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
':pattern -- A glob pattern like "*.png" (or regex):' \
'*::tags:_wutag_tags' \
&& ret=0
;;
(clear)
_arguments "${_arguments_options[@]}" \
'-f[Follow symlinks before clearing tags or values]' \
'--follow-symlinks[Follow symlinks before clearing tags or values]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
':pattern -- A glob pattern like "*.png":' \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" \
'(-X --exec-batch)*-x+[Execute a command on each individual file]:cmd:_command_names -e' \
'(-X --exec-batch)*--exec=[Execute a command on each individual file]:cmd:_command_names -e' \
'(-x --exec)*-X+[Execute a command on the batch of matching files]:cmd:_command_names -e' \
'(-x --exec)*--exec-batch=[Execute a command on the batch of matching files]:cmd:_command_names -e' \
'*-t+[Search just by tags or along with a tag(s)]:tags:_wutag_tags' \
'*--tags=[Search just by tags or along with a tag(s)]:tags:_wutag_tags' \
'-r[No colored output. Should be detected automatically on pipe]' \
'--raw[No colored output. Should be detected automatically on pipe]' \
'-f[Display only files in the search results]' \
'--only-files[Display only files in the search results]' \
'(-f --only-files)-G[Display tags and files on separate lines]' \
'(-f --only-files)--garrulous[Display tags and files on separate lines]' \
'-a[Files matching all tags (instead of any)]' \
'--all[Files matching all tags (instead of any)]' \
'(-a --all)-A[Files matching all and only all tags]' \
'(-a --all)--only-all[Files matching all and only all tags]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
':pattern -- Pattern to search tagged files:' \
&& ret=0
;;
(cp)
_arguments "${_arguments_options[@]}" \
'-G[Use a glob to match files (must be global)]' \
'--glob[Use a glob to match files (must be global)]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
':input-path -- Path to the file from which to copy tags from:_files' \
':pattern -- A glob pattern like "*.png":' \
&& ret=0
;;
(view)
_arguments "${_arguments_options[@]}" \
'-e+[Open tags in selected edtor (use only with vi, vim, neovim)]:editor: ' \
'--editor=[Open tags in selected edtor (use only with vi, vim, neovim)]:editor: ' \
'-f+[Format of file to view results (toml, yaml, json)]:format:(toml yaml yml json)' \
'--format=[Format of file to view results (toml, yaml, json)]:format:(toml yaml yml json)' \
'*-t+[Search with a tag as a filter]:tags: ' \
'*--tags=[Search with a tag as a filter]:tags: ' \
'-p+[Pattern to search for and open result in editor]:pattern: ' \
'--pattern=[Pattern to search for and open result in editor]:pattern: ' \
'-a[]' \
'--all[]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
&& ret=0
;;
(edit)
_arguments "${_arguments_options[@]}" \
'-c+[Set the color of the tag to the specified color. Accepted values are hex colors like '\''0x000000'\'' or '\''#1F1F1F'\'' or just plain '\''ff000a'\''. The colors are case insensitive meaning '\''1f1f1f'\'' is equivalent to '\''1F1F1F'\'']:color: ' \
'--color=[Set the color of the tag to the specified color. Accepted values are hex colors like '\''0x000000'\'' or '\''#1F1F1F'\'' or just plain '\''ff000a'\''. The colors are case insensitive meaning '\''1f1f1f'\'' is equivalent to '\''1F1F1F'\'']:color: ' \
'-r+[New name to replace tag with]:rename: ' \
'--rename=[New name to replace tag with]:rename: ' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
':tag -- The tag to edit:_wutag_tags' \
&& ret=0
;;
(info)
_arguments "${_arguments_options[@]}" \
'-r[TO BE IMPLEMENTED Do not use color in output]' \
'--raw[TO BE IMPLEMENTED Do not use color in output]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
&& ret=0
;;
(repair)
_arguments "${_arguments_options[@]}" \
'*-m+[Manually set the file'\''s new location]:MANUAL:_files:MANUAL:_files' \
'*--manual=[Manually set the file'\''s new location]:MANUAL:_files:MANUAL:_files' \
'-u+[Update the hashsum of all files, including unmodified files]: : ' \
'--unmodified=[Update the hashsum of all files, including unmodified files]: : ' \
'-d[Do not actually update the registry]' \
'--dry-run[Do not actually update the registry]' \
'-R[Remove files from the registry that no longer exist on the system]' \
'--remove[Remove files from the registry that no longer exist on the system]' \
'-r[Restrict the repairing to the current directory, or the path given with -d]' \
'--restrict[Restrict the repairing to the current directory, or the path given with -d]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
&& ret=0
;;
(print-completions)
_arguments "${_arguments_options[@]}" \
'--shell=[Shell to print completions. Available shells are: bash, elvish, fish, powershell, zsh]:SHELL:(bash zsh powershell elvish fish)' \
'-d+[Directory to output completions to]:DIR:_files -/' \
'--dir=[Directory to output completions to]:DIR:_files -/' \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
&& ret=0
;;
(clean-cache)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
&& ret=0
;;
(ui|tui)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'*-v[Display debugging messages on 4 levels (i.e., -vv..)]' \
'*--verbose[Display debugging messages on 4 levels (i.e., -vv..)]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_wutag_commands] )) ||
_wutag_commands() {
    local commands; commands=(
'list:Lists all available tags or files' \
'ls:Lists all available tags or files' \
'set:Set tag(s) and/or value(s) on results from a patterned query' \
'rm:Remove tag(s) from the files that match the provided pattern' \
'clear:Clears all tags of the files that match the provided pattern' \
'search:Searches for files that have all of the provided '\''tags'\''' \
'cp:Copies tags from the specified file to files that match a pattern' \
'view:View the results in an editor (optional pattern)' \
'edit:Edits a tag'\''s color' \
'info:Display information about the wutag environment' \
'repair:Repair broken/missing/modified files in the registry' \
'print-completions:Prints completions for the specified shell to dir or stdout' \
'clean-cache:Clean the cached tag registry' \
'ui:Open a TUI to manage tags' \
    )
    _describe -t commands 'wutag commands' commands "$@"
}
(( $+functions[_wutag__list_commands] )) ||
_wutag__list_commands() {
    local commands; commands=(
        "tags:"
        "files:"
    )
    _describe -t commands 'wutag list commands' commands "$@"
}
(( $+functions[_wutag_tags] )) ||
_wutag_tags() {
    [[ $PREFIX = -* ]] && return 1
    integer ret=1
    local -a tags; wtags=(
        ${(@f)$(_call_program commands wutag -g list -r tags -1cu)}
    )

    _describe -t wtags 'tags' wtags && ret=0
    return ret
}
_wutag "$@"

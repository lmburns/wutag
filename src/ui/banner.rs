//! Create a header/banner to fill up space in the help menu within the TUI

// Credit: idea and outline came from `orhun/gpg-tui`
//  * Using his work to help me learn how to code a TUI

// Need to get better art

// TODO: Fit screen better

use tui::layout::Rect;

pub(crate) const BANNERS: &[&str] = &[
    env!("CARGO_PKG_NAME"),
    r#"⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⠿⣿⣿⣿⣿⡿⠁⠆⣿⣿⣿⣿⡿⠿⣿
⣿⣿⣘⠀⠄⣷⣟⣁⠀⠀⣆⣿⣕⠁⠀⣪⣿
⣿⣿⣿⣹⠀⠆⣿⣿⠀⠀⣿⣿⠑⠀⣮⣿⣿
⣿⣿⣿⣿⡘⠀⣿⣿⠀⠀⣿⡟⠀⢢⣿⣿⣿
⣿⣿⣿⣿⡙⠀⠦⠗⠀⠀⠗⠙⠀⣮⣿⣿⣿
⣿⣿⣿⣿⣙⣀⣨⣨⠀⠀⣨⣈⣀⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⣿⣿⣿⣿⣿
"#,
    r#"⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⠿⣿⣿⣿⣿⡿⠁⠆⣿⣿⣿⣿⡿⠿⣿
⣿⣿⣘⠀⠄⣷⣟⣁⠀⠀⣆⣿⣕⠁⠀⣪⣿
⣿⣿⣿⣹⠀⠆⣿⣿⠀⠀⣿⣿⠑⠀⣮⣿⣿
⣿⣿⣿⣿⡘⠀⣿⣿⠀⠀⣿⡟⠀⢢⣿⣿⣿
⣿⣿⣿⣿⡙⠀⠦⠗⠀⠀⠗⠙⠀⣮⣿⣿⣿
⣿⣿⣿⣿⣙⣀⣨⣨⠀⠀⣨⣈⣀⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⣿⣿⣿⣿⣿
"#,
    r#"⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠆⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣘⠀⠅⠷⣿⡿⠑⠀⠀⠆⢿⡿⠗⠅⠀⣦⣿
⣿⣿⣿⣸⠀⠄⢿⣻⣻⠀⠀⣻⣾⡟⠁⠀⣮⣿⣿
⣿⣿⣿⣿⣙⠀⢦⣿⣿⠀⠀⣿⣿⠑⠀⣮⣿⣿⣿
⣿⣿⣿⣿⣿⠀⠀⣿⡿⠀⠀⣿⣿⠀⠀⣿⣿⣿⣿
⣿⣿⣿⣿⣿⠀⠀⠅⠁⠀⠀⠅⠅⠀⢦⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣨⣪⣺⡘⠀⠀⣺⣺⣨⣮⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⡙⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿
"#,
    r#"⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣝⠅⠗⠿⣿⣿⣿⡟⠀⠀⠄⢿⣿⣿⣿⠟⠗⠅⣧⣿
⣿⣿⣸⠀⠀⢤⣿⣝⣨⠀⠀⢠⣬⣯⣽⠈⠀⠀⣮⣿⣿
⣿⣿⣿⣹⠀⠀⢷⣿⣿⠀⠀⢦⣿⣿⡝⠀⠀⣾⣿⣿⣿
⣿⣿⣿⣿⡘⠀⠦⣿⣿⠀⠀⢦⣿⣿⠁⠀⣦⣿⣿⣿⣿
⣿⣿⣿⣿⣻⠀⠀⣿⣿⠀⠀⢆⣿⡿⠀⠀⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⠀⠀⠅⠅⠀⠀⠀⠅⠁⠀⠀⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣀⣨⣨⣺⠀⠀⠀⣺⣨⣨⣠⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿
"#,
    r#"⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠅⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⠿⠿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠄⢿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿
⣿⣿⣘⠀⠀⠅⠷⢿⣿⠿⠁⠀⠀⠀⠆⢿⣿⡿⠗⠁⠀⠀⣮⣿⣿
⣿⣿⣿⣹⠀⠀⠂⣾⣿⣺⣺⠀⠀⠀⣺⣺⣿⡻⠁⠀⢀⣾⣿⣿⣿
⣿⣿⣿⣿⣹⠀⠀⠦⣿⣿⣿⠀⠀⠀⣿⣿⣿⠑⠀⢀⣾⣿⣿⣿⣿
⣿⣿⣿⣿⣿⡘⠀⠀⣿⣿⣿⠀⠀⠀⣿⣿⡟⠀⠀⣦⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣻⠀⠀⢧⣿⣿⠀⠀⠀⣿⣿⡙⠀⠀⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⠀⠀⠆⠗⠗⠀⠀⠀⠗⠗⠑⠀⢀⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⠀⠀⢀⣀⣀⠀⠀⠀⣀⣀⠀⠀⠆⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣺⣿⣿⣿⣿⠀⠀⠀⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
"#,
    r#"⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠄⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣙⠄⠅⠇⠗⠿⣿⣿⣿⣿⣿⣿⣿⠑⠀⠀⠀⠀⠄⢿⣿⣿⣿⣿⣿⣿⡿⠟⠕⠅⠁⢤⣿⣿⣿⣿
⣿⣿⣿⣿⣸⠀⠀⠀⠀⠄⠇⢿⣿⣿⡿⠑⠀⠀⠀⠀⠀⠀⠄⠷⣿⣿⡿⠟⠁⠀⠀⠀⠀⣢⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣻⡀⠀⠀⠀⠳⣾⣿⣿⣺⣺⣺⠀⠀⠀⠀⢢⣺⣺⣿⣿⣻⡾⠀⠀⠀⠀⣮⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣻⡀⠀⠀⠀⢷⣿⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⣿⡿⠀⠀⠀⠀⣮⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣻⠀⠀⠀⠄⣿⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⣿⠑⠀⠀⠀⣮⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣙⠀⠀⠀⢧⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⡿⠀⠀⠀⢢⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠦⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⡙⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡙⠀⠀⠀⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⠑⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡙⠀⠀⠀⠿⠿⠿⠟⠀⠀⠀⠀⠦⠿⠿⠿⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡙⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡙⠀⠀⢀⣀⣀⣠⣈⠀⠀⠀⠀⢠⣨⣀⣀⡀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣺⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣻⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣺⣺⣺⣺⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
"#,
    r#"
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠕⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠑⠀⠀⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠙⠀⠀⠀⠀⢷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⠗⠗⠷⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠝⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠗⠗⢷⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣸⠀⠀⠀⠀⠄⠇⠷⣿⣿⣿⣿⣿⣿⣿⣿⠝⠀⠀⠀⠀⠀⠀⠀⠄⢿⣿⣿⣿⣿⣿⣿⣿⡿⠗⠅⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣹⡀⠀⠀⠀⠀⠀⠀⠇⢿⣿⣿⣿⡿⠕⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠷⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣻⡈⠀⠀⠀⠀⠂⢺⣺⣿⣿⣿⣨⣺⣺⣺⠀⠀⠀⠀⠀⢢⣺⣺⣸⣮⣿⣿⣻⣺⡞⠀⠀⠀⠀⠀⣢⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡈⠀⠀⠀⠀⠄⢿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⣪⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡈⠀⠀⠀⠀⠆⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⣮⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⢷⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⠙⠀⠀⠀⠀⣢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣹⠀⠀⠀⠀⠦⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡈⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⡙⠀⠀⠀⠀⣦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣙⠀⠀⠀⠀⢧⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⠑⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⠀⠀⠀⠀⢢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠄⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠦⣿⣿⣿⣿⣿⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡈⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡙⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⢀⣀⣀⣨⣨⣨⣨⠀⠀⠀⠀⠀⠀⣨⣨⣨⣨⣀⣀⠀⠀⠀⢦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣺⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣻⣺⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣀⣀⣀⣀⣀⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
"#,
];

#[derive(Debug)]
pub(crate) struct Banner;

impl Banner {
    /// Get the banner size for the size of the terminal
    pub(crate) fn get(mut rect: Rect) -> String {
        rect.height = rect.height.checked_sub(4).unwrap_or(rect.height);
        format!(
            "{}\n{} ({})\nAuthor: {}\nHomepage: {}",
            BANNERS
                .iter()
                .rev()
                .find(|banner| {
                    // super::notify(
                    //     format!(
                    //         "w:{},h:{}-w:{},h:{}",
                    //         rect.width,
                    //         rect.height,
                    //         banner
                    //             .lines()
                    //             .max_by(|x, y| x.len().cmp(&y.len()))
                    //             .unwrap_or_default()
                    //             .len(),
                    //         banner.lines().count()
                    //     ),
                    //     None,
                    // );
                    usize::from(rect.height) > banner.lines().count() - 1
                        && usize::from(rect.width)
                            > banner
                                .lines()
                                .max_by(|x, y| x.len().cmp(&y.len()))
                                .unwrap_or_default()
                                .len()
                })
                .unwrap_or(&BANNERS[0]),
            env!("CARGO_PKG_DESCRIPTION"),
            env!("CARGO_PKG_VERSION"),
            env!("CARGO_PKG_AUTHORS"),
            env!("CARGO_PKG_REPOSITORY")
        )
    }
}

//     r#"
//                 _
// __      ___   _| |_ __ _  __ _
// \ \ /\ / / | | | __/ _` |/ _` |
//  \ V  V /| |_| | || (_| | (_| |
//   \_/\_/  \__,_|\__\__,_|\__, |
//                          |___/
// "#,
//     r#"
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⢦⡗⠗⣈⠀⢀⣨⡈⠀⢠⡎⠗⣿⠗⢠⠀⠀⡈⠗⢧⠀⠀⠕⠗⢠⡞⠗⠗⠸⠗⢱⡈⣨⠗⠗⠳⠎⠗⣨
// ⠄⢳⡀⠇⣘⡞⠁⢗⣀⡗⠀⣎⡙⠀⢦⠀⠀⡙⠀⢦⠀⠢⡺⣺⠗⢠⡪⠺⣠⠀⢦⡟⠑⣨⠺⢘⡈⠀⣿
// ⠀⠄⠻⡀⠷⠑⣀⠀⠿⠀⡮⠑⠙⡀⢦⢨⡨⡙⠀⢦⢀⠀⡙⠿⡀⠦⠹⡨⠿⠀⢦⣙⠀⠿⢨⠮⠙⠀⣿
// ⠀⠀⠀⢻⣀⣢⠝⣹⣀⣮⠑⠀⠀⢻⣀⣀⣀⣨⣀⣦⠦⣘⣀⣀⠧⣈⣀⣀⣨⣀⣦⡝⣹⣀⣀⣠⡈⠀⣿
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡙⣀⢀⢀⢀⡟⠀
// "#,
//     r#"
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣢⠺⠺⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⢀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⠀⠀⠀⠀⢀⣀⢿⠀⠀⣿⢀⣀⠀⢀⣀⣀⡀⠀⣀⡀⠀⠀⢀⣀⣀⡀⠀⣀⡀⠀
// ⠦⣘⠀⠦⣘⠀⢀⡾⢻⡀⠀⣢⠙⠀⣢⠙⠀⣾⠀⠀⣾⠀⠀⣾⠀⠀⠀⠀⠀⣢⠙⠀⠀⠆⠑⠀⢢⡙⣢⠙⠀⠀⠆⠑⠀⢢⡙
// ⠀⠇⣈⠀⠇⣈⡎⠁⠄⢱⣠⠕⠀⣠⢵⠀⠀⣷⠀⠀⣷⠀⠀⣷⠀⠀⣷⢗⡛⠕⢀⡈⠗⢑⡈⠀⢆⡙⠕⢀⡈⠗⢑⡈⠀⢆⡙
// ⠀⠀⠧⠘⠀⠿⠑⠀⠀⠦⠟⠀⠢⠝⣿⠀⠀⣿⢠⣨⢿⠀⠀⢿⠀⠀⣿⢦⡙⠀⠦⡙⣨⡮⡙⠀⠦⡙⠀⠦⡙⣨⡮⡙⠀⠦⡙
// ⠀⠀⠀⠦⣘⠀⢀⡟⢻⡀⠀⣦⠑⠀⠀⠦⣘⠀⠀⠀⣀⠀⠀⣾⠦⣘⠀⠀⠀⢻⡀⠀⠀⢀⡀⠀⢢⡙⢻⡀⠀⠀⢀⡀⠀⢢⡙
// ⠀⠀⠀⠀⠅⠗⠕⠁⠄⠇⠗⠅⠀⠀⠀⠀⠅⠗⠗⠗⠇⠆⠗⠇⠀⠅⠗⠗⠗⠄⠇⠗⠗⠕⠑⠗⠕⠑⣬⠇⠗⠗⠕⠑⢠⡌⠑
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⢠⣨⣨⣨⣨⠿⠀⠀
// "#,
//     r#"
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠅⠅⢧⡘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⢠⣨⣨⣨⡈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣨⣨⣨⣨⣨⠀⠀⠀⠀⠀⢠⣨⡈⣿⠀⠀⢦⡙⣨⣨⠀⢠⣨⣨⣨⡈⠀⣠⣨⡀⠀⠀⠀⣨⣨⣨⡈⠀⢠⣨⡈⠀⠀
// ⠢⣘⠀⠀⢶⡈⠀⠀⢠⡞⢻⡀⠀⠀⣢⠙⠀⢀⣺⠀⠀⢦⡙⠀⠀⣾⠀⠀⠀⣻⠀⠀⠀⠀⠀⠀⢠⡚⠀⠀⠀⠄⠓⠀⠀⢢⡙⢠⡞⠀⠀⠀⠀⠓⠀⠀⠀⣻⠀
// ⠀⠧⠘⠀⠀⠷⠀⠀⠟⠀⠆⠙⠀⠢⠝⠀⠀⠦⠑⠀⠀⢦⠙⠀⠀⢿⠀⠀⠀⡿⠀⠀⠪⠺⠪⠸⠟⠀⠀⠠⠺⠈⠀⠀⠀⠦⡙⠿⠁⠀⠠⠺⠘⠀⠀⠀⠀⡿⠀
// ⠀⠀⠆⣹⠀⠀⢿⣿⠀⠀⠀⠦⣻⡙⠀⢀⡾⢣⡙⠀⠀⢦⡙⠀⠀⣿⠀⠀⠀⣿⠀⠀⢦⡙⢦⡙⠀⠀⣿⠀⠀⠀⣿⠀⠀⢦⡙⠀⠀⣾⠁⠀⠀⣿⠀⠀⠀⣿⠀
// ⠀⠀⠀⠇⣑⠀⠄⠁⠀⣀⡀⠀⠅⠁⢀⡆⠑⠆⠙⣀⠀⠦⠙⠺⠚⠷⠀⠀⠀⣿⢀⠀⠦⠙⠦⠙⡀⠀⠗⠢⠺⠘⠿⠀⠀⢦⡙⣀⠀⠇⠒⠺⠘⠿⠀⠀⠀⡟⠀
// ⠀⠀⠀⠀⠆⣹⠀⠀⣢⠝⢷⡈⠀⢀⡾⠁⠀⠀⠀⠧⣘⠀⠀⠀⠀⣠⠀⠀⠀⣿⠆⣹⠀⠀⠀⠀⢷⡈⠀⠀⠀⠀⣈⠀⠀⢦⡙⠧⣘⠀⠀⠀⠀⣨⠀⠀⠀⣿⠀
// ⠀⠀⠀⠀⠀⠅⠗⠗⠅⠀⠀⠇⠗⠕⠁⠀⠀⠀⠀⠀⠅⠗⠗⠗⠗⠗⠆⠗⠑⠗⠀⠄⠗⠗⠗⠗⠀⠇⠗⠗⠗⠑⠕⠆⠗⠆⠑⢠⡍⠗⠗⠗⠑⠗⠀⢠⡈⠕⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢦⡙⣀⣀⣀⣀⣀⣠⡟⠀⠀⠀
// "#,
//     r#"
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣭⠅⠅⠅⠅⣨⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠂⠺⠺⠺⠺⠺⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠺⠺⠺⠺⠺⠺⠘
// ⠀⠀⠀⠀⠀⠀⠂⠺⠺⠘⠿⠀⠀⠀⠀⠿⠢⠺⠺⠘⠀⠂⠺⠺⠺⠺⠺⣀⠀⠲⠺⠺⠀⠀⠀⠀⠂⠺⠺⠺⠺⠺⣀⠀⠲⠺⠺⠀⠀⠀
// ⠀⢿⡈⠀⠀⠀⢿⡈⠀⠀⠀⢠⡿⠦⣹⠀⠀⠀⠀⣮⠙⠀⠀⠀⣮⠙⠀⠀⠀⣿⠀⠀⠀⠀⣿⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⣮⠙⠀⠀⠀⠀⠀⠇⠑⠀⠀⠀⢦⡙⠀⣮⠙⠀⠀⠀⠀⠀⠇⠑⠀⠀⠀⢦⡙⠀
// ⠀⠄⢻⠀⠀⠀⠄⢻⠀⠀⠀⡾⠁⠀⠧⡘⠀⠀⢢⠝⠀⠀⠀⢢⠝⠀⠀⠀⠀⣿⠀⠀⠀⠀⣿⠀⠀⠀⠀⣿⠀⠀⠀⣠⣨⣈⣨⣨⣢⠝⠀⠀⠀⣠⣨⣈⠀⠀⠀⠀⠀⢦⡙⢢⠝⠀⠀⠀⣠⣨⣈⠀⠀⠀⠀⠀⢦⡙⠀
// ⠀⠀⠀⢢⡈⠀⠀⠀⢪⣨⡸⠀⠀⠀⠀⠠⣸⣪⠈⠀⠀⠀⣪⠀⣺⠀⠀⠀⠀⣿⠀⠀⠀⠀⣿⠀⠀⠀⠀⣿⠀⠀⠀⠄⣺⠁⢣⡜⠀⠀⠀⣢⡘⠄⠅⠁⢢⡘⠀⠀⠀⢦⡙⠀⠀⠀⣢⡘⠄⠅⠁⢢⡘⠀⠀⠀⢦⡙⠀
// ⠀⠀⠀⠀⢿⡈⠀⠀⢦⣿⡙⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⣮⠝⠀⣿⠀⠀⠀⠀⣿⠀⠀⠀⠀⣿⠀⠀⠀⠀⣿⠀⠀⠀⠀⣿⠀⢦⡙⠀⠀⠀⣿⡀⠀⠀⠀⢦⡙⠀⠀⠀⢦⡙⠀⠀⠀⣿⡀⠀⠀⠀⢦⡙⠀⠀⠀⢦⡙⠀
// ⠀⠀⠀⠀⠄⠁⡀⠀⠀⠅⠀⠀⢀⣀⠀⠀⠄⠁⠀⠀⡀⠅⠀⠀⠿⠀⡀⠀⠀⠿⠆⠗⠗⠑⠿⠀⠀⠀⠀⣗⠀⡀⠀⠀⠿⠀⠦⠙⢀⠀⠀⠆⠑⠗⠗⠗⠦⠙⠀⠀⠀⢆⡑⢀⠀⠀⠆⠑⠗⠗⠗⠦⠙⠀⠀⠀⢆⡑⠀
// ⠀⠀⠀⠀⠀⠀⢷⡈⠀⠀⠀⢠⡟⠆⣹⠀⠀⠀⠀⣮⠑⠀⠀⠀⠀⠀⢷⡈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢷⡈⠀⠀⠀⠀⠀⠆⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢦⡙⠆⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢦⡙⠀
// ⠀⠀⠀⠀⠀⠀⠀⠿⣨⣨⣨⠿⠀⠀⠦⢹⣨⣨⡮⠙⠀⠀⠀⠀⠀⠀⠀⠿⣨⣨⣨⣨⣨⡈⣿⢠⣨⣨⡈⣿⠀⠀⠿⣨⣨⣨⣨⣨⡈⠦⢹⣨⣨⣨⣨⣨⢦⡙⣨⣨⣨⢦⡙⠀⠦⢹⣨⣨⣨⣨⣨⢦⠙⠀⠀⠀⢦⡙⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣺⠀⠀⠀⠀⠀⠀⠀⠀⠀⢢⡘⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠗⠆⠗⠗⠗⠗⠗⠗⠗⠕⠀⠀⠀⠀⠀
// "#,
